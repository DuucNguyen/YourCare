@model ReflectionIT.Mvc.Paging.IPagingList

@{
    string currentPageSize = !string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["pageSize"])
                                ? ViewContext.HttpContext.Request.Query["pageSize"]
                                : "10";

    bool showFirstAndLast = true;
    bool useDisabled = true;
    bool useBoxIcon = true;

    var start = this.Model.StartPageIndex;
    var stop = this.Model.StopPageIndex;

    string icon = useBoxIcon ? "<i class='bx bx-chevrons-left'></i>" : "&laquo;";
    string previous = $"<span class=\"d-none d-sm-flex align-items-center\">{icon} Previous</span><span class=\"d-block d-sm-none\">{icon}</span>";
    icon = useBoxIcon ? "<i class='bx bx-chevrons-right'></i>" : "&raquo;";

    string next = $"<span class=\"d-none d-sm-flex align-items-center\">Next {icon}</span><span class=\"d-block d-sm-none\">{icon}</span>";
    string first = "1";
    string last = Model.PageCount.ToString();

}

@* @if (this.Model.PageCount > 1)
{ *@

<div class="d-flex align-content-center ">

    <ul style="margin-bottom: 0;" class="pagination">

        @if (this.Model.PageIndex > 1)
        {
            <li class="page-item">
                <a href="@Url.Action(Model.Action, new { pageIndex = this.Model.PageIndex - 1, pageSize = currentPageSize })" aria-label="Previous" class="page-link">
                    @Html.Raw(@previous)
                </a>
            </li>
        }
        else if (useDisabled)
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">@Html.Raw(@previous)</a>
            </li>
        }

        @if (showFirstAndLast)
        {
            @if (start > 1)
            {
                <li class="page-item">
                    <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(1))" aria-label="First" class="page-link">
                        @Html.Raw(@first)
                    </a>
                </li>
                @if (start > 2)
                {
                    <li class="page-item disabled page-item-spacing mx-2">
                        ...
                    </li>
                }
            }
        }

        @for (int i = start; i <= stop; i++)
        {
            <li class="page-item @((Model.PageIndex == i) ? "active" : null)">
                @Html.ActionLink(i.ToString(), Model.Action, Model.GetRouteValueForPage(i), new { @class = "page-link" })
            </li>
        }

        @if (showFirstAndLast)
        {
            @if (stop < this.Model.PageCount)
            {
                @if (stop < this.Model.PageCount - 1)
                {
                    <li class="page-item disabled page-item-spacing mx-2">
                        ...
                    </li>
                }
                <li class="page-item">
                    <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(Model.PageCount))" aria-label="Last" class="page-link">
                        @Html.Raw(@last)
                    </a>
                </li>
            }
        }

        @if (this.Model.PageIndex < this.Model.PageCount)
        {
            <li class="page-item">
                <a href="@Url.Action(Model.Action, Model.GetRouteValueForPage(Model.PageIndex+1) )" aria-label="Next" class="page-link">
                    @Html.Raw(@next)
                </a>
            </li>
        }
        else if (useDisabled)
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">@Html.Raw(@next)</a>
            </li>
        }

    </ul>

</div>


<script>


    function call(event, target) {
        event.preventDefault();
        console.log(target);
    }

</script>
@* } *@